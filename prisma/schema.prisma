// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SELLER
  USER
  ADMIN
}

enum Status {
  AVAILABLE
  SOLD
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products        Product[]
  productComments ProductComment[]
  reviewsGiven    Review[]         @relation("ReviewGiver") // Only buyers can give reviews
  reviewsReceived Review[]         @relation("ReviewReceiver") // Only sellers can receive reviews
  profileImage    ProfileImage?

  @@index([role])
  @@map("users")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.Text
  price       Decimal
  category    Int
  status      Status   @default(AVAILABLE)
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id])
  productComments ProductComment[] // Comments on the product
  images          ProductImages[]

  @@map("products")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  @@map("categories")
}

model ProductComment {
  id          Int      @id @default(autoincrement())
  description String   @db.Text
  productId   Int
  userId      Int
  createdAt   DateTime @default(now())

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@map("product_comments")
}

model Review {
  id          Int      @id @default(autoincrement())
  rating      Int      @default(1) // Rating out of 5
  description String   @db.Text
  buyerId     Int
  sellerId    Int
  createdAt   DateTime @default(now())

  buyer User @relation("ReviewGiver", fields: [buyerId], references: [id])

  seller User @relation("ReviewReceiver", fields: [sellerId], references: [id])

  @@index([buyerId])
  @@index([sellerId])
  @@map("reviews")
}

model ProfileImage {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  imageId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("profile_images")
}

// ... existing code ...

model ProductImages {
  id        Int      @id @default(autoincrement())
  productId Int
  imageId   String // Stores the cloud storage image ID/URL
  order     Int      @default(0) // For controlling display order of images
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id])

  @@index([productId])
  @@map("product_images")
}
